
INSTALLATION AND RUNNING

To run the code, make sure you have python3 (checked for python3.6) and preferrably ipython. The main file is tire_new.py, and the main procedure is alltire(). Tune all the global parameters in globals.py and then run your ipython or python. From ipython, compile the code
> %run tire_new
and then run the main routine
> alltire()
if everything is fine, the "out/" directory (or the output directory set by "outdir" in the "globals" configuration file) should immediately (unless you turned the graphical output off by setting ifplot = False in globals.py) start filling with files like tireout..png containing the snapshots of the simulation. Also, current total flux (namely, luminosity in L_Edd/4\pi units) will be written to "flux.dat". The main output is either tireout.hdf5 (if "ifhdf" flag is True in globals.py) or, alternatively, a series of ..dat files with snapshots. 

The core also supports running with an arbitrary configuration file (useful if you want to run several simulations simultaneously). Just make your own version of globals.py, make a fancy name for it (say, myglobals.py), and compile the code as
> %run tire_new myglobals
Make sure that the outputs of different simulations do not interfere. For this, set different outdir names in the configuration files. 

To run the code without ipython, you need to be sure that all the necessary libraries like scipy are linked. Then you can uncomment the "alltire()" line at the end of tire_new and run the code from the command line as
> python tire_new.py
or
> python tire_new myglobals

If you are running the code remotely, make sure that graphic output is off (ifplot=False in globals.py). 

OUTPUTS

So far, if "ifhdf" flag is False in globals.py, it produces multiple structure snapshots "tireout*.dat" containing density, velocity, and energy density as functions of length along the field line. Also, total luminosity is written in "flux.dat" as a function of time. 

Alternatively, if "ifhdf" is True, it will write the same information in the HDF5 file "tireout.hdf5". Individual snapshots are stored as individual datasets "entry000000", "entry000001" etc. 

POSSIBLE PROBLEMS

As the code produces a lot of individual output files, you may encounter problems with file indexers. Notably, under most KDE-using systems, baloo file extractor easily hangs the system, hence it is instructive to turn it off by "balooctl disable" in the session you are running. 

The code is designed in a way to make the results accessable as soon as possible. You do not need to wait until the simulation ends to read and reduce the output entries. If you need to kill the code during the simulation, all the results would be saved. However, the output files are not accessable for reading from the same ipython session then. 

TODO: 
0) do conservation laws work?
1) restart mode
2) neutrino losses
