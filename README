
INSTALLATION AND RUNNING
To run the code, make sure you have python3 (checked for python3.6) and
ipython. The main
file is tire_new.py, and the main procedure is alltire(). Tune all the
global parameters in globals.py and then run your ipython or python. From
ipython, compile the code
> %run tire_new
and then run the main routine
> alltire()
if everything is fine, the directory should immediately start filling with
files like tireout..png and tireout..dat containing the snapshots of the
simulation. Also, current total flux (namely, luminosity in L_Edd/4\pi units)
will be writted to "flux.dat".

I have not set the code up without ipython, certain libraries like scipy are
not available then. 

OUTPUTS

So far, if "ifhdf" flag is False in globals.py, it produces multiple structure snapshots "tireout*.dat" containing density, velocity, and energy density as functions of length along the field line. Also, total luminosity is written in "flux.dat" as a function of time. 

Alternatively, if "ifhdf" is True, it will write the same information in the HDF5 file "tireout.hdf5". Individual snapshots are stored as individual datasets "entry000000", "entry000001" etc. 

POSSIBLE PROBLEMS

As the code produces a lot of individual output files, you may encounter problems with file indexers. Notably, baloo file extractor easily hangs the system, hence it is instructive to turn it off by "balooctl disable" in the session you are running. 

The code is designed in a way to make the results accessable as soon as possible. You do not need to wait until the simulation ends to read and reduce the output entries. If you need to kill the code during the simulation, all the results would be saved. The output files are not accessable for reading from the same ipython session then. 
